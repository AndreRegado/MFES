class Player
types
 	 public Cor = <Branco> | <Preto>;

instance variables
public cor: Cor;
public arqueiros : set of Arqueiro;
public posicoes : set of Posicao;

operations
	public Player: Cor * Posicao * Posicao * Posicao * Posicao * Posicao ==> Player
	Player(tipo,p1,p2,p3,p4,p5) == (
		if(tipo = <Branco>) then (
			dcl a1: Arqueiro := new Arqueiro(p1);
			dcl a2: Arqueiro := new Arqueiro(p2);
			dcl a3: Arqueiro := new Arqueiro(p3);
			dcl a4: Arqueiro := new Arqueiro(p4);
			dcl a5: Arqueiro := new Arqueiro(p5);
	
		arqueiros := {a1,a2,a3,a4,a5};
		cor := tipo;
		return self;
		)
		else if (tipo = <Preto>) then (
			dcl a1: Arqueiro := new Arqueiro(p1);
			dcl a2: Arqueiro := new Arqueiro(p2);
			dcl a3: Arqueiro := new Arqueiro(p3);
			dcl a4: Arqueiro := new Arqueiro(p4);
			dcl a5: Arqueiro := new Arqueiro(p5);
			

		arqueiros := {a1,a2,a3,a4,a5});
		cor := tipo;
		return self;
	);
	
	public contaPontos: () ==> nat
		contaPontos() == (
			dcl pontos: nat:=0;
			-- Se jogador branco entao valem 2 pontos os arqueiros que estiverem na posicao y=4
			if(cor = <Branco>) then (
				for all arqueiro in set arqueiros do (
				if (arqueiro.posicao.getY() = 4 and arqueiro.vivo = <True>) then
						pontos := pontos + 2
				else if(arqueiro.vivo = <True>) then
						pontos := pontos + 1;))
			-- Se jogador preto entao valem 2 pontos os arqueiros que estiverem na posicao y=0
			else (
				for all arqueiro in set arqueiros do (
				if (arqueiro.posicao.getY() = 0 and arqueiro.vivo = <True>) then
						pontos := pontos + 2
				else if (arqueiro.vivo = <True>) then
						pontos := pontos + 1;));
			return pontos;
		
		);
		
		-- mata arqueiro que esta na posicao pos
		public mataArqueiro: Posicao ==> ()
			mataArqueiro(pos) == (
				for all arq in set arqueiros do
					if(arq.posicao.getX() = pos.getX() and arq.posicao.getY() = pos.getY() and arq.posicao.ocupado = pos.ocupado) then (
						arq.matar();
						desocupaPos(arq);
						return)
			);
			
		-- marca arqueiro que esta na posicao pos	
			public marcaArqueiro: Posicao ==> ()
			marcaArqueiro(pos) == (
				for all arq in set arqueiros do
					if(arq.posicao.getX() = pos.getX() and arq.posicao.getY() = pos.getY() and arq.posicao.ocupado = pos.ocupado) then (
						arq.marcar();
						return)
			);
			
		-- retorna arqueiro por posicao
		public arqueiroPorPosicao: Posicao ==> Arqueiro
				arqueiroPorPosicao(pos) == (
						dcl arqe: Arqueiro;
						for all arq in set arqueiros do 
						if (arq.posicao.getX() = pos.getX() and arq.posicao.getY() = pos.getY() and arq.posicao.ocupado = pos.ocupado) then
						arqe:= arq;
						
						return arqe;
				);
		
		-- retorna posiçao onde está um arqueiro		
		public posicaoPorArqueiro: Arqueiro ==> Posicao
				posicaoPorArqueiro(arq_in) == (
						dcl ret_pos: Posicao := new Posicao(0,0,0);
						dcl x: nat;
						dcl y: nat;
						dcl ocupado: nat;
						for all arq in set arqueiros do 
						if (arq.vivo = arq_in.vivo 
						and arq.marcado = arq_in.marcado
						and arq.posicao.getX() = arq_in.posicao.getX()
						and arq.posicao.getY() = arq_in.posicao.getY()
						and arq.posicao.getOcupado() = arq_in.posicao.getOcupado()) then (
							x := arq.posicao.getX();
							y := arq.posicao.getY();
							ocupado := arq.posicao.getOcupado();
							ret_pos.X := x;
							ret_pos.Y := y;
							ret_pos.ocupado := ocupado;
						);
						return ret_pos;
				);
				
		-- define set de arqueiros (para testes)
		public setArqueiros: set of Arqueiro ==> ()
			setArqueiros(arqs) == (
				arqueiros:=arqs;
			);
	
	
		-- desocupar posicao atraves de arqueiro
		public desocupaPos: Arqueiro ==> ()
				desocupaPos(arq) == (
				for all s in set arqueiros do (
					if (s.posicao.getX() = arq.posicao.getX() and s.posicao.getY() = arq.posicao.getY()) then
						s.posicao.desocupar();
		));
		
		-- ocupar posicao atraves de arqueiro
		public novaPos: Arqueiro * Posicao ==> ()
				novaPos(arq, pos_nova) == (
				for all s in set arqueiros do (
					if (s = arq) then
						s.SetPosicao(pos_nova);
		));
		
		
		-- ocupar posicao com Arqueiro Branco
		public ocupaPosBranco: Arqueiro ==> ()
				ocupaPosBranco(arq) == (
				for all s in set arqueiros do (
					if (s = arq) then
						s.posicao.ocuparEquipaBranco();
		));
		
		-- ocupar posicao com Arqueiro Preto
		public ocupaPosPreto: Arqueiro ==> ()
				ocupaPosPreto(arq) == (
				for all s in set arqueiros do (
					if (s = arq) then
						s.posicao.ocuparEquipaPreto();
		));
		
		-- funçao que recebe um arqueiro e escolhe uma posiçao adjacente aleatoria!
		public JogadaAleatoria : Arqueiro ==> Posicao
			JogadaAleatoria(arq) == (
				dcl pos: Posicao := new Posicao(0,0,0);
				dcl x: nat;
				dcl y: nat;
				dcl ocupado: nat;
				for all s in set arqueiros do (
					if (s.posicao.getX() = arq.posicao.getX() and s.posicao.getY() = arq.posicao.getY()) then (
							posicoes := s.posicao.getAdjacentes();
							for all p in set posicoes do (
								if(cor = <Branco>) then (
									if(p.getOcupado() = 2 or p.getOcupado() = 0) then (
										x:=p.getX();
										y:=p.getY();
										ocupado:=p.getOcupado();
										pos.X := x;
										pos.Y := y;
										pos.ocupado := ocupado;
								  	return pos;
									)	
								)
								else (
									if(p.getOcupado() = 1 or p.getOcupado() = 0) then (
										x:=p.getX();
										y:=p.getY();
										ocupado:=p.getOcupado();
										pos.X := x;
										pos.Y := y;
										pos.ocupado := ocupado;
								  	return pos;
									)	
								)
							)
					)
				);
				return pos;
			);
			
			-- verifica se têm algum jogador morto e repo-lo no tabuleiro
			public reporArqueiroMorto : () ==> Posicao
				reporArqueiroMorto() == (
					dcl pos_ret : Posicao := new Posicao (0,0,0);
					dcl x: nat;
					dcl y: nat;
					dcl ocupado: nat;
					for all arq in set arqueiros do (
						if(arq.vivo = <False>) then ( 
							posicoes := retornaPrimeiraLinha();
							for all pos in set posicoes do (
								if(pos.ocupado = 0) then (
										x:=pos.getX();
										y:=pos.getY();
										ocupado:=pos.getOcupado();
										pos_ret.X := x;
										pos_ret.Y := y;
										pos_ret.ocupado := ocupado;
								  	return pos;
								)									
							)
						)
					);
					return pos_ret;
				);
				
		 public retornaPrimeiraLinha:  () ==> set of Posicao
		 retornaPrimeiraLinha() == (
		 		if(cor = <Branco>) then (
		 			dcl p1: Posicao := new Posicao (0,0,0);
		 			dcl p2: Posicao := new Posicao (1,0,0);
		 			dcl p3: Posicao := new Posicao (2,0,0);
		 			dcl p4: Posicao := new Posicao (3,0,0);
		 			dcl p5: Posicao := new Posicao (4,0,0);
		 			posicoes := {p1,p2,p3,p4,p5};
		 			return posicoes;
		 		)
		 		else (
		 			dcl p1: Posicao := new Posicao (0,4,0);
		 			dcl p2: Posicao := new Posicao (1,4,0);
		 			dcl p3: Posicao := new Posicao (2,4,0);
		 			dcl p4: Posicao := new Posicao (3,4,0);
		 			dcl p5: Posicao := new Posicao (4,4,0);
		 			posicoes := {p1,p2,p3,p4,p5};
		 		);
		 		return posicoes;
		 );
			
			
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Player