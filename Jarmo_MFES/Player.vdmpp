class Player
types
 	 public Cor = seq of char;

instance variables
public cor: Cor;
public arqueiros : set of Arqueiro;
	inv card arqueiros = 5;
public posicoes : set of Posicao;
public pontos : nat := 0;

operations
	public Player: Cor * Posicao * Posicao * Posicao * Posicao * Posicao ==> Player
	Player(tipo,p1,p2,p3,p4,p5) == (
		if(tipo = ['B','r','a','n','c','o']) then (
			dcl a1: Arqueiro := new Arqueiro(p1);
			dcl a2: Arqueiro := new Arqueiro(p2);
			dcl a3: Arqueiro := new Arqueiro(p3);
			dcl a4: Arqueiro := new Arqueiro(p4);
			dcl a5: Arqueiro := new Arqueiro(p5);
	
		arqueiros := {a1,a2,a3,a4,a5};
		cor := tipo;
		return self;
		)
		else if (tipo = ['P','r','e','t','o']) then (
			dcl a1: Arqueiro := new Arqueiro(p1);
			dcl a2: Arqueiro := new Arqueiro(p2);
			dcl a3: Arqueiro := new Arqueiro(p3);
			dcl a4: Arqueiro := new Arqueiro(p4);
			dcl a5: Arqueiro := new Arqueiro(p5);
			

		arqueiros := {a1,a2,a3,a4,a5});
		cor := tipo;
		return self;
	);
	
	public contaPontos: () ==> nat
		contaPontos() == (
			-- Se jogador branco entao valem 2 pontos os arqueiros que estiverem na posicao y=4
			if(cor = ['B','r','a','n','c','o']) then (
				for all arqueiro in set arqueiros do (
				if (arqueiro.posicao.getY() = 4 and arqueiro.vivo = <True>) then (
						pontos := pontos + 2;)
				else if(arqueiro.vivo = <True>) then
						pontos := pontos + 1;))
			-- Se jogador preto entao valem 2 pontos os arqueiros que estiverem na posicao y=0
			else (
				for all arqueiro in set arqueiros do (
				if (arqueiro.posicao.getY() = 0 and arqueiro.vivo = <True>) then
						pontos := pontos + 2
				else if (arqueiro.vivo = <True>) then
						pontos := pontos + 1;));
			return pontos;
		)
		post pontos > 0 and pontos <> pontos~;
				
			-- mata arqueiro que esta na posicao pos
				public mataArqueiro: Posicao ==> ()
				mataArqueiro(pos) == (
				for all arq in set arqueiros do
					if(arq.getPosicao().getX() = pos.getX() and arq.getPosicao().getY() = pos.getY()) then (
						arq.matar();
						return)
			)
			post card arqueiros = card arqueiros~;
			
			-- marca arqueiro que esta na posicao pos	
			public marcaArqueiro: Arqueiro ==> ()
			marcaArqueiro(arq_in) == (
				for all arq in set arqueiros do
					if(arq.posicao.getX() = arq_in.posicao.getX() and arq.posicao.getY() = arq_in.posicao.getY()) then (
						arq.marcar();return)
			)
			pre arq_in in set arqueiros
			post card arqueiros = card arqueiros~;
			
			-- marca arqueiro que esta na posicao pos	
			public desmarcaArqueiro: Arqueiro ==> ()
			desmarcaArqueiro(arq_in) == (
				for all arq in set arqueiros do
					if(arq.posicao.getX() = arq_in.posicao.getX() and arq.posicao.getY() = arq_in.posicao.getY()) then (
						arq.desmarcar();return)
			)
			pre arq_in in set arqueiros
			post card arqueiros = card arqueiros~;
			
			public arq_pos: Posicao ==> Arqueiro
				arq_pos(pos) == (
						dcl p1: Posicao := new Posicao(9,9,9);
						dcl arqe: Arqueiro := new Arqueiro(p1);
						for all arq in set arqueiros do 
							if (arq.posicao.getX() = pos.getX() and arq.posicao.getY() = pos.getY()) then 
							(
							return arq;
							);
						return arqe;
				)
			post card arqueiros = card arqueiros~;
			
				
		-- define set de arqueiros (para testes)
		public setArqueiros: set of Arqueiro ==> ()
			setArqueiros(arqs) == (
				arqueiros:=arqs;
			);
		
		-- desocupar posicao atraves de arqueiro
		public desocupaPos: Arqueiro ==> ()
				desocupaPos(arq) == (
				for all s in set arqueiros do (
					if (s.posicao.getX() = arq.posicao.getX()
					and s.posicao.getY() = arq.posicao.getY()) then
						s.posicao.desocupar();
		))
			pre arq in set arqueiros
			post card arqueiros = card arqueiros~;
				
		-- ocupar posicao atraves de arqueiro
		public novaPos: Arqueiro * Posicao ==> ()
				novaPos(arq, pos_nova) == (
				for all s in set arqueiros do (
					if (s.posicao.getX() = arq.posicao.getX() and s.posicao.getY() = arq.posicao.getY()) then (
				
						s.SetPosicao(pos_nova);
						
					if(cor = ['B','r','a','n','c','o']) then
							s.posicao.ocuparEquipaBranco()
					else
					    s.posicao.ocuparEquipaPreto();
					--	return;
						
		)))
			pre arq in set arqueiros and pos_nova in set arq.posicao.adjacentes
			post card arqueiros = card arqueiros~;
		
			
			
		-- funçao que recebe um arqueiro e escolhe uma posiçao adjacente aleatoria
		public JogadaAleatoria : Arqueiro ==> Posicao
			JogadaAleatoria(arq) == (
				dcl pos: Posicao := new Posicao(5,5,0);
				dcl x: nat;
				dcl y: nat;
				dcl ocupado: nat;
				for all s in set arqueiros do (
					if (s.posicao.getX() = arq.posicao.getX() and s.posicao.getY() = arq.posicao.getY()) then (
							posicoes := s.posicao.getAdjacentes();
							for all p in set posicoes do (
								if(cor = ['B','r','a','n','c','o']) then (
									if(p.getOcupado() = 2 or p.getOcupado() = 0) then (
										x:=p.getX();
										y:=p.getY();
										ocupado:=p.getOcupado();
										pos.X := x;
										pos.Y := y;
										pos.ocupado := ocupado;
								  	return pos;
									)	
								)
								else (
									if(p.getOcupado() = 1 or p.getOcupado() = 0) then (
										x:=p.getX();
										y:=p.getY();
										ocupado:=p.getOcupado();
										pos.X := x;
										pos.Y := y;
										pos.ocupado := ocupado;
								  	return pos;
									)	
								)
							)
					)
				);
				return pos;
			);
			
			-- verifica se têm algum jogador morto e repo-lo no tabuleiro
			public reporArqueiroMorto : set of Posicao ==> bool
				reporArqueiroMorto(setpos) == (
					for all arq in set arqueiros do (
						if(arq.vivo = <False>) then ( 
							for all pos in set setpos do (
								if(pos.ocupado = 0) then (
										arq.setVivo();
										arq.SetPosicao(pos);
										if(cor = ['B','r','a','n','c','o']) then (
											arq.posicao.ocuparEquipaBranco();)
										else (
											arq.posicao.ocuparEquipaPreto();									
								  	);
								)									
							);
						return true;)
					);
					return false;
				)
				pre card setpos = 5
				post card arqueiros = card arqueiros~;
				
			
			
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Player