class Tests
	operations
		public AssertTrue : bool ==> ()
		AssertTrue(a) == return 
            pre a;
		
		public TestAll : () ==> ()
		TestAll() ==
		(
			Tests1();
			--Tests_inicia_board(); --ta malllllll
			Tests_muda_turno();
			Tests_mata_arq_pos();
			Tests_gameOver();
		);
		
		
		public Tests1 : () ==> ()
		Tests1() == 
      ( 	
      		dcl	p1: Posicao:=new Posicao(1,0,0);
          dcl arq: Arqueiro := new Arqueiro(p1);
          AssertTrue(p1.getX() = 1);
						AssertTrue(p1.getY() = 0);
           	p1.SetX(5);
           	AssertTrue(p1.getX() = 5);
          	p1.SetY(9);
          	AssertTrue(p1.getY() = 9);
          	AssertTrue(arq.getVivo() = <True>);
          	arq.matar();
          	AssertTrue(arq.getVivo() = <False>);
      );
            
    public Tests_inicia_board : () ==> ()
		Tests_inicia_board() == 
            ( 	
            		dcl	j_1: Jarmo:=new Jarmo();
            		dcl p1: Posicao := new Posicao(0,0,1);
   							dcl a1: Arqueiro := new Arqueiro(p1);
   	
   							dcl arq_movido: Arqueiro;
   							dcl p12: Posicao := new Posicao(1,2,0);
   							
   							dcl p_nova: Posicao := new Posicao (1,2,1);
   							dcl arq_mov_comp: Arqueiro := new Arqueiro(p_nova);
   							
   							--Jogada de teste com 1º arqueiro de <Branco> para (1,2)
   							j_1.jogada(a1,p12);
   							
   							
   							-- Troca jogador atual
               	AssertTrue(j_1.jogadorAtual.cor = <Preto>);
               	
               	arq_movido := iota s in set j_1.jogadorAdversario.arqueiros
               	& (s.posicao.getX() = 1 and s.posicao.getY() = 2 and s.posicao.ocupado = 1);
              	
              	-- Testa se arqueiro movido tem as caracteristicas corretas
              	AssertTrue(arq_movido <> arq_mov_comp);
            );
            
            -- verifica se arqueiro é marcado depois de matar outro
            
            public Tests_marca_arqueiro : () ==> ()
						Tests_marca_arqueiro() == 
            ( 	
            		dcl	j_1: Jarmo:=new Jarmo();
            		dcl p1: Posicao := new Posicao(0,0,1);
   							dcl a1: Arqueiro := new Arqueiro(p1);
   	
   							j_1.jogadorAtual.marcaArqueiro(a1.posicao);
   							a1 := j_1.jogadorAtual.arqueiroPorPosicao(p1);
   							-- Troca jogador atual
               	AssertTrue(a1.marcado = <True>);
            );
            
            -- verifica se arqueiro morre
            public Tests_mata_arqueiro : () ==> ()
						Tests_mata_arqueiro() == 
            ( 	
            		dcl	j_1: Jarmo:=new Jarmo();
            		dcl p1: Posicao := new Posicao(0,0,1);
   							dcl a1: Arqueiro := new Arqueiro(p1);
   							
   							
   							dcl p2: Posicao := new Posicao(0,0,0);
   	
   							j_1.jogadorAtual.mataArqueiro(p1);
   							a1 := j_1.jogadorAtual.arqueiroPorPosicao(p2);
   							
   							-- Troca jogador atual
               	AssertTrue(a1.vivo = <False>);
            );
            
            -- verifica se posicao do tabuleiro é desocupada
            public Tests_desocupa_tab : () ==> ()
				Tests_desocupa_tab() == 
            ( 	
            		dcl	j_1: Jarmo:=new Jarmo();
            		dcl p1: Posicao := new Posicao(0,0,1);
            		dcl p2: Posicao := new Posicao(0,0,0);
   							dcl p3: Posicao;
   							
   							j_1.desocupaTab(p1);
   							p3 := j_1.tabPos(p2);
   							-- Troca jogador atual
               	AssertTrue(p3.getX() = p2.getX() and p3.getY() = p2.getY() and p3.ocupado = p2.ocupado);
            );
            
            -- desocupar posicao atraves de arqueiro
            public Tests_desocupaPos_Arqueiro: () ==> ()
            Tests_desocupaPos_Arqueiro() == 
            (
            		dcl	j_1: Jarmo:=new Jarmo();
            		dcl p1: Posicao := new Posicao(0,0,1);
            		dcl p2: Posicao := new Posicao(0,0,0);
            		dcl p3: Posicao;
   							dcl a1: Arqueiro := new Arqueiro(p1);
   							dcl a2: Arqueiro := new Arqueiro(p2);
            	
            		j_1.jogadorAtual.desocupaPos(a1);
   							p3 := j_1.jogadorAtual.posicaoPorArqueiro(a2);
       					
            		AssertTrue(p3.getX() = 0  and p3.getY() = 0 and p3.ocupado = 0);
            );
            
            -- ocupar posicao atraves de arqueiro
            public Tests_novaPos: () ==> ()
            Tests_novaPos() == 
            (
            		dcl	j_1: Jarmo:=new Jarmo();
            		dcl p1: Posicao := new Posicao(0,0,1);
            		dcl p8: Posicao := new Posicao(1,2,0);
            		dcl p9: Posicao := new Posicao(1,2,1);
            		
   							dcl a1: Arqueiro := new Arqueiro(p1);
   							dcl a2: Arqueiro := new Arqueiro(p9);
   							dcl arq : Arqueiro;
            	
            		j_1.jogadorAtual.novaPos(a1,p8);
   							arq := 	j_1.jogadorAtual.arqueiroPorPosicao(p9);
       					
            		AssertTrue(arq.vivo = a2.vivo and arq.marcado = a2.marcado and arq.posicao.getX() = a2.posicao.getX()
						and arq.posicao.getY() = a2.posicao.getY()
						and arq.posicao.getOcupado() = a2.posicao.getOcupado());
            );
            
    -- teste muda turno. Jogador inicial é <Branco> e deve passar a <Preto>
    public Tests_muda_turno : () ==> ()
		Tests_muda_turno() == (
					dcl	j_1: Jarmo:=new Jarmo();
					
					j_1.MudarTurno();
					AssertTrue(j_1.jogadorAtual.cor = <Preto>));
					
		-- teste matar um arqueiro por posicao
		public Tests_mata_arq_pos: () ==> ()
		Tests_mata_arq_pos() == (
					-- para criar um jogador
					dcl p1: Posicao := new Posicao(0,0,1);
					dcl p2: Posicao := new Posicao(1,0,1);
					dcl p3: Posicao := new Posicao(2,0,1);
					dcl p4: Posicao := new Posicao(3,0,1);
					dcl p5: Posicao := new Posicao(4,0,1);
					
					dcl a1: Arqueiro := new Arqueiro(p1);
					dcl pl1: Player := new Player(<Branco>, p1,p2,p3,p4,p5);
					AssertTrue(pl1.arqueiroPorPosicao(p1).vivo = <True>);
					-- mata arqueiro na p1
					pl1.mataArqueiro(p1);
					AssertTrue(pl1.arqueiroPorPosicao(p1).vivo = <False>));
					
		-- teste gameOver
		public Tests_gameOver: () ==> ()
		Tests_gameOver() == (
		-- Quinta linha
		dcl p21: Posicao := new Posicao(0,4,1);
		dcl p22: Posicao := new Posicao(1,4,1);
		dcl p23: Posicao := new Posicao(2,4,1);
		dcl p24: Posicao := new Posicao(3,4,1);
		dcl p25: Posicao := new Posicao(4,4,1);
		
		dcl a1: Arqueiro := new Arqueiro(p21);
		dcl a2: Arqueiro := new Arqueiro(p22);
		dcl a3: Arqueiro := new Arqueiro(p23);
		dcl a4: Arqueiro := new Arqueiro(p24);
		dcl a5: Arqueiro := new Arqueiro(p25);
		
		-- arqueiros do jogador branco nas posicoes de fim do jogo
		dcl arqueiros: set of Arqueiro := {a1,a2,a3,a4,a5};
							
		dcl	j_1: Jarmo:=new Jarmo();
					
					AssertTrue(j_1.gameOver() = false);
					
					j_1.jogadorAtual.setArqueiros(arqueiros);
					
					AssertTrue(j_1.gameOver() = true);
					);



end Tests