class Tests
	operations
		public AssertTrue : bool ==> ()
		AssertTrue(a) == return 
            pre a;
		
		public TestAll : () ==> ()
		TestAll() ==
		(
			Tests_operacoes_basicas();
			Tests_jogada_casa_vazia();
			Tests_2_jogadas_casa_vazia();
			Tests_jogada_matar();
			Tests_6jogadas_repor_arqueiro();
			Tests_jogadaAleatoria_Branco();
			Tests_jogadaAleatoria_Preto();
			Tests_muda_turno();
			Tests_gameOver();
			Tests_gameOver_mortos();
			Tests_Pontos();
		);
		
		
		public Tests_operacoes_basicas : () ==> ()
		Tests_operacoes_basicas() == 
      ( 	
      		dcl	p1: Posicao:=new Posicao(1,0,0);
          dcl arq: Arqueiro := new Arqueiro(p1);
          AssertTrue(p1.getX() = 1);
						AssertTrue(p1.getY() = 0);
           	p1.SetX(5);
           	AssertTrue(p1.getX() = 5);
          	p1.SetY(9);
          	AssertTrue(p1.getY() = 9);
          	AssertTrue(arq.getVivo() = <True>);
          	arq.matar();
          	AssertTrue(arq.getVivo() = <False>);
      );
    
    -- mover um arqueiro para uma posicao vazia e verificar se posicao mudou e posicao inicial ficou desocupada
    public Tests_jogada_casa_vazia : () ==> ()
		Tests_jogada_casa_vazia() == 
            ( 	
            		dcl bool_jogada : bool;
            		dcl	j_1: Jarmo:=new Jarmo();
            		
            		dcl p1: Posicao := new Posicao(0,0,1);
   							dcl p12: Posicao := new Posicao(1,2,0);
   							
   							--Jogada de teste com 1º arqueiro de <Branco> em (0,0) para (1,2)
   							bool_jogada:=	j_1.jogada(j_1.jogadorAtual.arq_pos(p1),j_1.tabPos(p12));
   							
   							
   							-- Troca jogador atual
               	AssertTrue(bool_jogada);
              	
              	-- Testa se arqueiro movido tem as caracteristicas corretas
              	AssertTrue(j_1.jogadorAdversario.arq_pos(p12).posicao.getX() = 1); 
              	AssertTrue(j_1.jogadorAdversario.arq_pos(p12).posicao.getY() = 2);
              	-- Testa se a posicao ocupado agora pelo arqueiro está efetivamente ocupada
              	AssertTrue(j_1.tabPos(p12).ocupado = 1);
              	-- Teste se a posicao ocupada inicialmente pelo arqueiro esta agora desocupada
              	AssertTrue(j_1.tabPos(p1).ocupado = 0);
            );
            
            -- mover um arqueiro para uma posicao vazia e verificar se posicao mudou e posicao inicial ficou desocupada
    public Tests_2_jogadas_casa_vazia : () ==> ()
		Tests_2_jogadas_casa_vazia() == 
            ( 	
            		dcl bool_jogada : bool;
            		dcl bool_jogada2 : bool;
            		
            		dcl	j_1: Jarmo:=new Jarmo();
            		
            		dcl p1: Posicao := new Posicao(0,0,1);
   							dcl p2: Posicao := new Posicao(1,2,0);
   							dcl p3: Posicao := new Posicao(0,4,2);
   							dcl p4: Posicao := new Posicao(2,3,0);
   							
   							--Jogada de teste com 1º arqueiro de <Branco> em (0,0) para (1,2)
   							bool_jogada:=	j_1.jogada(j_1.jogadorAtual.arq_pos(p1),j_1.tabPos(p2));
   							--Jogada de teste com 1 arqueiro de <Preto> en (0,4) para (2,3)
   							bool_jogada2:=j_1.jogada(j_1.jogadorAtual.arq_pos(p3),j_1.tabPos(p4));
   							
   							-- Troca jogador atual
               	AssertTrue(bool_jogada);
               	AssertTrue(bool_jogada2);
               	
               	AssertTrue(j_1.jogadorAtual.cor = ['B','r','a','n','c','o']);
              	
              	-- Testa se arqueiro movido branco tem as caracteristicas corretas
              	AssertTrue(j_1.jogadorAtual.arq_pos(p2).posicao.getX() = 1); 
              	AssertTrue(j_1.jogadorAtual.arq_pos(p2).posicao.getY() = 2);
              	-- Testa se a posicao ocupado agora pelo arqueiro está efetivamente ocupada
              	AssertTrue(j_1.tabPos(p2).ocupado = 1);
              	-- Teste se a posicao ocupada inicialmente pelo arqueiro esta agora desocupada
              	AssertTrue(j_1.tabPos(p1).ocupado = 0);
              	
              	-- Testa se arqueiro movido preto tem as caracteristicas corretas
              	AssertTrue(j_1.jogadorAdversario.arq_pos(p4).posicao.getX() = 2); 
              	AssertTrue(j_1.jogadorAdversario.arq_pos(p4).posicao.getY() = 3);
              	-- Testa se a posicao ocupado agora pelo arqueiro está efetivamente ocupada
              	AssertTrue(j_1.tabPos(p4).ocupado = 2);
              	-- Teste se a posicao ocupada inicialmente pelo arqueiro esta agora desocupada
              	AssertTrue(j_1.tabPos(p3).ocupado = 0);
            );
            
             -- mover um arqueiro para uma posicao vazia e verificar se posicao mudou e posicao inicial ficou desocupada
    public Tests_jogada_matar : () ==> ()
		Tests_jogada_matar() == 
            ( 	
            		dcl bool_jogada : bool;
            		dcl bool_jogada2 : bool;
            		
            		dcl	j_1: Jarmo:=new Jarmo();
            		
            		dcl p1: Posicao := new Posicao(0,0,1);
   							dcl p2: Posicao := new Posicao(1,2,0);
   							dcl p3: Posicao := new Posicao(0,4,2);
   							
   							--Jogada de teste com 1º arqueiro de <Branco> em (0,0) para (1,2)
   							bool_jogada:=	j_1.jogada(j_1.jogadorAtual.arq_pos(p1),j_1.tabPos(p2));
   							--Jogada de teste com 1 arqueiro de <Preto> en (0,4) para (1,2)
   							bool_jogada2:=j_1.jogada(j_1.jogadorAtual.arq_pos(p3),j_1.tabPos(p2));
   							
   							-- Troca jogador atual
               	AssertTrue(bool_jogada);
               	AssertTrue(bool_jogada2);
               	
               	AssertTrue(j_1.jogadorAtual.cor = ['B','r','a','n','c','o']);
              	
              	-- Testa se arqueiro movido branco tem as caracteristicas corretas
              	AssertTrue(j_1.jogadorAtual.arq_pos(p2).posicao.getX() = 1); 
              	AssertTrue(j_1.jogadorAtual.arq_pos(p2).posicao.getY() = 2);
              	AssertTrue(j_1.jogadorAtual.arq_pos(p2).vivo = <False>);
              	-- Testa se a posicao ocupado agora pelo arqueiro está efetivamente ocupada
              	AssertTrue(j_1.tabPos(p2).ocupado = 2);
              	-- Teste se a posicao ocupada inicialmente pelo arqueiro esta agora desocupada
              	AssertTrue(j_1.tabPos(p1).ocupado = 0);
              	
              	-- Testa se arqueiro movido preto tem as caracteristicas corretas
              	AssertTrue(j_1.jogadorAdversario.arq_pos(p2).posicao.getX() = 1); 
              	AssertTrue(j_1.jogadorAdversario.arq_pos(p2).posicao.getY() = 2);
              	AssertTrue(j_1.jogadorAdversario.arq_pos(p2).getMarcado() = <True>);
              	-- Testa se a posicao ocupado agora pelo arqueiro está efetivamente ocupada
              	AssertTrue(j_1.tabPos(p2).ocupado = 2);
              	-- Teste se a posicao ocupada inicialmente pelo arqueiro esta agora desocupada
              	AssertTrue(j_1.tabPos(p3).ocupado = 0);
            );
            
            
     
            -- executa 6 jogadas sendo que na ultima um dos arqueiros pretos marcado atinge a posicao final -> recuperar um dos seus arqueiros mortos
             public Tests_6jogadas_repor_arqueiro : () ==> ()
							Tests_6jogadas_repor_arqueiro() == 
            ( 
	            dcl	j_1: Jarmo;
	            dcl bool_test: bool;
	            dcl bool_test2: bool;
	            dcl bool_test3: bool;
	            dcl bool_test4: bool;
	            dcl bool_test5: bool;
	            dcl bool_test6: bool;
							
							dcl p1: Posicao := new Posicao(0,0,1);
							dcl p12: Posicao := new Posicao(1,2,0);  	
							dcl p21: Posicao := new Posicao(0,4,2);
							dcl p2: Posicao := new Posicao(1,0,1);
							dcl p9: Posicao := new Posicao(3,1,0);
							dcl p25: Posicao := new Posicao(4,4,2);
							dcl p14: Posicao := new Posicao(3,2,0);
							j_1 :=new Jarmo();
							   						
   						
  						
  					-- jogador branco joga de 0,0 para 1,2
   					bool_test:=	j_1.jogada(j_1.jogadorAtual.arq_pos(p1),j_1.tabPos(p12));
   			
   					--jogador preto joga de 0,4 para 1,2
  					
   					bool_test2:= j_1.jogada(j_1.jogadorAtual.arq_pos(p21),j_1.tabPos(p12));
   					-- jogador branco joga de 1,0 para 3,1
   					bool_test3:= j_1.jogada(j_1.jogadorAtual.arq_pos(p2),j_1.tabPos(p9));
   					-- jogador preto joga de 4,4 para 3,2
   					bool_test4:= j_1.jogada(j_1.jogadorAtual.arq_pos(p25),j_1.tabPos(p14));
   					-- jogador branco joga de 3,1 para 3,2 - mata preto
   					bool_test5:= j_1.jogada(j_1.jogadorAtual.arq_pos(p9),j_1.tabPos(p14));
   					-- jogador preto joga de 1,2 para 0,0 -> repoe arqueiro em 0,4
   					bool_test6:= j_1.jogada(j_1.jogadorAtual.arq_pos(p12),j_1.tabPos(p1));
   						
   					AssertTrue(bool_test2 = true);
   					AssertTrue(bool_test3 = true);
   					AssertTrue(bool_test4 = true);
   					AssertTrue(bool_test5 = true);
   					AssertTrue(bool_test6 = true);
   					AssertTrue(j_1.jogadorAdversario.arq_pos(p25).vivo = <True>);
   					AssertTrue(j_1.jogadorAdversario.arq_pos(p25).posicao.getX() = 4);
   					AssertTrue(j_1.jogadorAdversario.arq_pos(p25).posicao.getY() = 4);
   					
   					);
   						
            public Tests_jogadaAleatoria_Branco: () ==> ()
            Tests_jogadaAleatoria_Branco() ==
            (
            		dcl	j_1: Jarmo:=new Jarmo();
            		dcl p1: Posicao := new Posicao(0,0,1);
            		dcl p2: Posicao;
   							dcl a1: Arqueiro:= new Arqueiro(p1);
            	
            	
            		p2 := j_1.jogadorAtual.JogadaAleatoria(a1);
            		
            		AssertTrue( (p2.getX() = 2 and p2.getY() = 1) or (p2.getX() = 1 and p2.getY() = 2));
            );
            
            public Tests_jogadaAleatoria_Preto: () ==> ()
            Tests_jogadaAleatoria_Preto() ==
            (
            		dcl	j_1: Jarmo:=new Jarmo();
            		dcl p1: Posicao := new Posicao(0,4,2);
            		dcl p2: Posicao;
   							dcl a1: Arqueiro:= new Arqueiro(p1);
            	
            	
            		p2 := j_1.jogadorAdversario.JogadaAleatoria(a1);
            		
            		AssertTrue( (p2.getX() = 2 and p2.getY() = 1) or (p2.getX() = 1 and p2.getY() = 2));
            );
            
        
            
    -- teste muda turno. Jogador inicial é <Branco> e deve passar a <Preto>
    public Tests_muda_turno : () ==> ()
		Tests_muda_turno() == (
					dcl	j_1: Jarmo:=new Jarmo();
					
					j_1.MudarTurno();
					AssertTrue(j_1.jogadorAtual.cor = ['P','r','e','t','o']));
					
		
		-- teste gameOver com todos os arqueiros vivos
		public Tests_gameOver: () ==> ()
		Tests_gameOver() == (
		-- Quinta linha
		dcl p21: Posicao := new Posicao(0,4,1);
		dcl p22: Posicao := new Posicao(1,4,1);
		dcl p23: Posicao := new Posicao(2,4,1);
		dcl p24: Posicao := new Posicao(3,4,1);
		dcl p25: Posicao := new Posicao(4,4,1);
		
		dcl a1: Arqueiro := new Arqueiro(p21);
		dcl a2: Arqueiro := new Arqueiro(p22);
		dcl a3: Arqueiro := new Arqueiro(p23);
		dcl a4: Arqueiro := new Arqueiro(p24);
		dcl a5: Arqueiro := new Arqueiro(p25);
		
		-- arqueiros do jogador branco nas posicoes de fim do jogo
		dcl arqueiros: set of Arqueiro := {a1,a2,a3,a4,a5};
							
		dcl	j_1: Jarmo:=new Jarmo();
					
					AssertTrue(j_1.gameOver() = false);
					
					j_1.jogadorAtual.setArqueiros(arqueiros);

					AssertTrue(j_1.gameOver() = true);
		);
		
		
		-- teste gameOver com alguns arqueiros mortos
		public Tests_gameOver_mortos: () ==> ()
		Tests_gameOver_mortos() == (
		
					dcl p21: Posicao := new Posicao(0,4,1);
					dcl p22: Posicao := new Posicao(1,4,1);
					dcl p23: Posicao := new Posicao(2,4,1);
					dcl p24: Posicao := new Posicao(3,4,1);
					dcl p25: Posicao := new Posicao(4,4,1);
					
					dcl a1: Arqueiro := new Arqueiro(p21);
					dcl a2: Arqueiro := new Arqueiro(p22);
					dcl a3: Arqueiro := new Arqueiro(p23);
					dcl a4: Arqueiro := new Arqueiro(p24);
					dcl a5: Arqueiro := new Arqueiro(p25);
					dcl arqueiros: set of Arqueiro;
					dcl	j_1: Jarmo:=new Jarmo();
		
		a5.matar();
		a2.matar();
		
		-- arqueiros do jogador branco nas posicoes de fim do jogo
		 arqueiros := {a1,a2,a3,a4,a5};
		 
					AssertTrue(j_1.gameOver() = false);
					
					j_1.jogadorAtual.setArqueiros(arqueiros);

					AssertTrue(j_1.gameOver() = true);
		);
		
		-- testa contagem de pontos, cenário em que o jogador <Branco> é vencedor
		-- 
		public Tests_Pontos :() ==> ()
			Tests_Pontos() == (
		
				-- Quinta linha
				dcl p21: Posicao := new Posicao(0,4,1);
				dcl p22: Posicao := new Posicao(1,4,1);
				dcl p23: Posicao := new Posicao(2,4,1);
				dcl p24: Posicao := new Posicao(3,4,1);
				dcl p25: Posicao := new Posicao(4,4,1);
				
				dcl a1: Arqueiro := new Arqueiro(p21);
				dcl a2: Arqueiro := new Arqueiro(p22);
				dcl a3: Arqueiro := new Arqueiro(p23);
				dcl a4: Arqueiro := new Arqueiro(p24);
				dcl a5: Arqueiro := new Arqueiro(p25);
				
				-- arqueiros do jogador branco nas posicoes de fim do jogo
				dcl arqueiros: set of Arqueiro := {a1,a2,a3,a4,a5};
				
				dcl p1: Posicao := new Posicao(0,0,1);
				dcl p2: Posicao := new Posicao(1,1,1);
				dcl p3: Posicao := new Posicao(2,0,1);
				dcl p4: Posicao := new Posicao(3,4,1);
				dcl p5: Posicao := new Posicao(4,0,1);
						
				dcl a11: Arqueiro := new Arqueiro(p1);
				dcl a22: Arqueiro := new Arqueiro(p2);
				dcl a33: Arqueiro := new Arqueiro(p3);
				dcl a44: Arqueiro := new Arqueiro(p4);
				dcl a55: Arqueiro := new Arqueiro(p5);
				
				-- arqueiros do jogador branco nas posicoes de fim do jogo
				dcl arqueiros2: set of Arqueiro := {a11,a22,a33,a44,a55};
				
				dcl	j_1: Jarmo:=new Jarmo();
				j_1.jogadorAtual.setArqueiros(arqueiros);
				j_1.jogadorAdversario.setArqueiros(arqueiros2);
				--pontos := j_1.jogadorAtual.contaPontos();
				
				j_1.contaPontos();
				--jogador_aux:= {j_1.jogadorAtual};
				
				
				AssertTrue(j_1.vencedor = j_1.jogadorAtual);
			);


end Tests