class Jarmo

types

instance variables
-- Jogador 1 : Branco - começa em cima
-- Jogador 2 : Preto - começa em baixo
 public jogadores: set of Player;
 public tabuleiro: set of Posicao;
 public jogadorAtual : Player;
 public jogadorAdversario: Player;
 public vencedor: Player;
 public temp_pl: Player;
 public adjacentes_poss: set of Posicao;

 
 public recupera_jog: bool;
 public arq_a_matar: Arqueiro;
 
-- private arq_a_mover: Arqueiro;
-- private pos_nova: Posicao;
	
operations
		public Jarmo : () ==> Jarmo
			Jarmo() == (
			-- Posicao (x,y,ocupado)
		
		-- Primeira linha
		dcl p1: Posicao := new Posicao(0,0,1);
		dcl p2: Posicao := new Posicao(1,0,1);
		dcl p3: Posicao := new Posicao(2,0,1);
		dcl p4: Posicao := new Posicao(3,0,1);
		dcl p5: Posicao := new Posicao(4,0,1);
		
		-- Segunda linha
		dcl p6: Posicao := new Posicao(0,1,0);
		dcl p7: Posicao := new Posicao(1,1,0);
		dcl p8: Posicao := new Posicao(2,1,0);
		dcl p9: Posicao := new Posicao(3,1,0);
		dcl p10: Posicao := new Posicao(4,1,0);
		
		-- Terceira linha
		dcl p11: Posicao := new Posicao(0,2,0);
		dcl p12: Posicao := new Posicao(1,2,0);
		dcl p13: Posicao := new Posicao(2,2,0);
		dcl p14: Posicao := new Posicao(3,2,0);
		dcl p15: Posicao := new Posicao(4,2,0);
		
		-- Quarta linha
		dcl p16: Posicao := new Posicao(0,3,0);
		dcl p17: Posicao := new Posicao(1,3,0);
		dcl p18: Posicao := new Posicao(2,3,0);
		dcl p19: Posicao := new Posicao(3,3,0);
		dcl p20: Posicao := new Posicao(4,3,0);
		
		-- Quinta linha
		dcl p21: Posicao := new Posicao(0,4,2);
		dcl p22: Posicao := new Posicao(1,4,2);
		dcl p23: Posicao := new Posicao(2,4,2);
		dcl p24: Posicao := new Posicao(3,4,2);
		dcl p25: Posicao := new Posicao(4,4,2);
		
		dcl pl1: Player;
		dcl pl2: Player;
		
		-- Definir adjacentes
		p1.setAdjacentes({p12,p8});
		p2.setAdjacentes({p11,p9});
		p3.setAdjacentes({p6,p12,p10});
		p4.setAdjacentes({p7,p15});
		p5.setAdjacentes({p8,p14});
		p6.setAdjacentes({p3,p13});
		p7.setAdjacentes({p4,p8,p14,p12});
		p8.setAdjacentes({p1,p5,p17,p7,p9});
		p9.setAdjacentes({p2,p8,p14,p20});
		p10.setAdjacentes({p3,p13});
		p11.setAdjacentes({p2,p22});
		p12.setAdjacentes({p1,p7,p3,p19,p17,p21});
		p13.setAdjacentes({p6,p10,p16,p24});
		p14.setAdjacentes({p7,p9,p5,p25,p19});
		p15.setAdjacentes({p4,p18});
		p16.setAdjacentes({p13,p23});
		p17.setAdjacentes({p12,p8,p18,p24});
		p18.setAdjacentes({p17,p15,p19,p25,p21});
		p19.setAdjacentes({p22,p18,p12,p14});
		p20.setAdjacentes({p23,p9});
		p21.setAdjacentes({p12,p18});
		p22.setAdjacentes({p11,p19});
		p23.setAdjacentes({p16,p14,p20});
		p24.setAdjacentes({p17,p13});
		p25.setAdjacentes({p18,p14});
		
		tabuleiro := {p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19,p20,p21,p22,p23,p24,p25};

		pl1 := new Player(<Branco>, p1,p2,p3,p4,p5);
		pl2 := new Player(<Preto>, p21,p22,p23,p24,p25);
		jogadores:= {pl1,pl2};
		jogadorAtual := pl1;
		jogadorAdversario := pl2;
		return self;
		);

		-- get turno
		public getTurno : () ==> Player
			getTurno() == (return jogadorAtual;);
		
		
		-- get Tabuleiro
		public getTabuleiro: () ==> set of Posicao
			getTabuleiro() == (return tabuleiro;);
			
			

		-- Mudar de turno
		public MudarTurno : () ==> ()
			MudarTurno() == (
			jogadorAtual := iota s in set jogadores & s <> jogadorAtual;
			jogadorAdversario := iota q in set jogadores & q <> jogadorAtual;);
				
		
	 -- game over : quando termina o jogo
	pure public gameOver: () ==> bool
			gameOver() == (
				dcl res: bool := true;
				if (jogadorAtual.cor = <Branco>) then (
					for all arq in set jogadorAtual.arqueiros do
								if ( arq.vivo = <True> and arq.posicao.getY() <> 4) then 
									res:= false;)
					else
					for all arq in set jogadorAtual.arqueiros do
								if ( arq.vivo = <True> and arq.posicao.getY() <> 0) then 
									res:= false;
									
					return res;);
			
			-- verfifica se posicao esta ocupada
				public verifica_pos: Posicao ==> bool 
					verifica_pos(posicao) == (
						return posicao.getOcupado() <> 0
					);
					
				
				-- Adicionar parametros jogador e nova pos para teste
				
				public jogada: Arqueiro * Posicao ==> ()
					jogada(arq_a_mover, pos_nova) == (
				
						-- Escolher jogador a recuperar se for o caso
						if(verifica_pos(pos_nova)) then (
							
							jogadorAtual.marcaArqueiro(arq_a_mover.posicao);
							-- mudar tambem no arq a mover pq vai ser usado depois para comparaçao no jogador
							arq_a_mover.marcar();
							jogadorAdversario.mataArqueiro(pos_nova);
							desocupaTab(pos_nova);
							
							-- Se matou e chegou à ultima posicao entao pode recuperar um morto
							if (jogadorAtual.cor = <Branco>) then 
								 (if(pos_nova.getY() = 5) then
									recupera_jog := true;)
							else
								 (if(pos_nova.getY() = 0) then
									recupera_jog := true;)
							);
						-- desocupar posicao antiga e assumir nova
						jogadorAtual.desocupaPos(arq_a_mover);
						-- desocupa no tabuleiro
						desocupaTab(arq_a_mover.posicao);
						-- mudar tambem no arq a mover pq vai ser usado depois para comparaçao no jogador
						arq_a_mover.posicao.desocupar();
						jogadorAtual.novaPos(arq_a_mover, pos_nova);
						
				
						if (jogadorAtual.cor = <Branco>) then 
								(
								-- ocupa tab primeiro porque posicao vai ser mudada e depois falha a comparaçao
								ocupaTabBranco(arq_a_mover.posicao);
								jogadorAtual.ocupaPosBranco(arq_a_mover);
								)
						else
								(
								ocupaTabPreto(arq_a_mover.posicao);
								jogadorAtual.ocupaPosPreto(arq_a_mover));
							
						MudarTurno();)
						
						-- fazer sem ser por jogador atual?
							--dcl pontosPl1: nat:=0;
					--dcl pontosPl2: nat:=0;
						--else (
						--pontosPl1 := jogadorAtual.contaPontos();
					--	pontosPl2 := jogadorAdversario.contaPontos();
						
						--if (pontosPl1 > pontosPl2) then
						--	vencedor := jogadorAtual
						--else
						--	vencedor := jogadorAdversario;
						--)

					--)
					pre
					(not gameOver() and
					-- arqueiro a mover esta no set de arqueiros do jogadoratual, está vivo,
					-- não está na ultima posicao e a posicao nova faz parte das posicoes adjacentes
					-- à peça onde está agora
					((jogadorAtual.cor = <Branco> 
					and arq_a_mover in set jogadorAtual.arqueiros 
					and (arq_a_mover.vivo = <True>)
					and arq_a_mover.posicao.getY() <> 4
					and pos_nova in set arq_a_mover.posicao.adjacentes
					or
					-- arqueiro a mover esta no set de arqueiros do jogadoratual, está vivo,
					-- não está na ultima posicao e a posicao nova faz parte das posicoes adjacentes
					-- à peça onde está agora
					(jogadorAtual.cor = <Preto> 
					and arq_a_mover in set jogadorAtual.arqueiros 
					and (arq_a_mover.vivo = <True>)
					and arq_a_mover.posicao.getY() <> 0 
					and pos_nova in set arq_a_mover.posicao.adjacentes
					))));
				
		
	
					-- Falta contar pontos
					-- Falta Repor jogador morto
					-- Testar 
									-- jogadorAtual.desocupaPos(arq_a_mover);
									-- desocupaTab(arq_a_mover.posicao);
									-- arq_a_mover.posicao.desocupar();
									-- jogadorAtual.novaPos(arq_a_mover, pos_nova);
									-- ocupaTabBranco(arq_a_mover.posicao);
								  -- jogadorAtual.ocupaPosBranco(arq_a_mover);
								  -- ocupaTabPreto(arq_a_mover.posicao);
								  -- jogadorAtual.ocupaPosPreto(arq_a_mover);
								  -- jogada
					
					-- retorna posicao do tabuleiro igual a parametro
					public tabPos: Posicao ==> Posicao
						tabPos(pos) == (
						dcl ret_pos: Posicao;
								for all pos_temp in set tabuleiro do
									if(pos_temp.getX() = pos.getX() and pos_temp.getY() = pos.getY() and pos_temp.ocupado = pos.ocupado) then
									ret_pos := pos_temp;
								
						return ret_pos;		
					);
					
					-- desocupa posicao pos no tabuleiro
					public desocupaTab: Posicao ==> ()
						desocupaTab(pos) == (
								for all pos_temp in set tabuleiro do (
									if(pos_temp = pos) then (
									pos_temp.desocupar();
									return;		
					)));
					
					-- ocupa posicao no tabuleiro com arqueiro branco
					public ocupaTabBranco: Posicao ==> ()
						ocupaTabBranco(pos) == (
								for all pos_temp in set tabuleiro do (
									if(pos_temp = pos) then (
									pos_temp.ocuparEquipaBranco();
									return;		
					)));
					
					
					-- ocupa posicao no tabuleiro com arqueiro branco
					public ocupaTabPreto: Posicao ==> ()
						ocupaTabPreto(pos) == (
								for all pos_temp in set tabuleiro do (
									if(pos_temp = pos) then (
									pos_temp.ocuparEquipaPreto();
									return;		
					)));
					
				
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Jarmo